AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Stack for running a Docker container on Fargate in multiple AZs

Parameters:
  BucketName:
    Description: 'The name of the S3 bucket where the config files are hosted'
    Type: String

  CertificateArn:
    Description: 'The ARN of the SSL certificate'
    Type: String

  TaskDefinitionRoleArn:
    Description: 'The ARN of the IAM role with access to the S3 bucket'
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName

  # IAM policy to allow ECS task to fetch the config file
  ECSTaskS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ECSTaskS3Access
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource:
              Fn::Sub:
                - arn:aws:s3:::${BucketName}/api/signed-api.json
                - BucketName: !Ref ConfigBucket
      Roles:
        - Ref: ECSTaskRole

  FargateCluster:
    Type: AWS::ECS::Cluster

  FargateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SignedApiExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: FargateExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  FargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: FargateTaskDefinition
      ExecutionRoleArn:
        Ref: FargateExecutionRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ContainerDefinitions:
        - Name: signed-api
          Image: andreogle/signed-api:latest
          Memory: '512'
          Cpu: '256'
          Essential: 'true'
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: 8090
          PortMappings:
            - ContainerPort: 8090
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: 'signed-api'
              awslogs-region: 'us-east-1'
              awslogs-stream-prefix: 'ecs'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: FargateALB
      Subnets:
        - Ref: Subnet1
        - Ref: Subnet2
      SecurityGroups:
        - Fn::GetAtt:
            - LoadBalancerSecurityGroup
            - GroupId
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Scheme: internet-facing

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTPS
      Port: 443
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ALB
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - Description: Allow HTTPS traffic
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - Description: Allow traffic on port 8090 within VPC
          IpProtocol: tcp
          FromPort: 8090
          ToPort: 8090
          CidrIp:
            Fn::GetAtt:
              - VPC
              - CidrBlock
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0

  FargateService:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListener
    Properties:
      ServiceName: FargateService
      Cluster:
        Ref: FargateCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 10
      TaskDefinition:
        Ref: FargateTaskDefinition
      LoadBalancers:
        - TargetGroupArn:
            Ref: TargetGroup
          ContainerName: signed-api
          ContainerPort: 8090
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Ref: Subnet1
            - Ref: Subnet2
          AssignPublicIp: 'ENABLED'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: FargateTargetGroup
      TargetType: ip
      VpcId:
        Ref: VPC
      Port: 8090
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'signed-api'
      RetentionInDays: 14

Outputs:
  LoadBalancerDNSName:
    Description: 'The DNS name of the Load Balancer'
    Value:
      Fn::GetAtt:
        - LoadBalancer
        - DNSName
